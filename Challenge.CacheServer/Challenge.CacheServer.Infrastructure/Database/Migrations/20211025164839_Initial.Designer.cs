// <auto-generated />
using System;
using Challenge.CacheServer.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Challenge.CacheServer.Infrastructure.Database.Migrations
{
    [DbContext(typeof(CacheServerDbContext))]
    [Migration("20211025164839_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Challenge.CacheServer.Core.Models.CacheRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CurrencyPairId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndPeriod")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartPeriod")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyPairId");

                    b.ToTable("CacheRecord");
                });

            modelBuilder.Entity("Challenge.CacheServer.Core.Models.CurrencyPair", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("First")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Second")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CurrencyPair");
                });

            modelBuilder.Entity("Challenge.CacheServer.Core.Models.ExchangeRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CurrencyPairId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyPairId", "Date")
                        .IsUnique();

                    b.ToTable("ExchangeRate");
                });

            modelBuilder.Entity("Challenge.CacheServer.Core.Models.CacheRecord", b =>
                {
                    b.HasOne("Challenge.CacheServer.Core.Models.CurrencyPair", "CurrencyPair")
                        .WithMany("CacheRecords")
                        .HasForeignKey("CurrencyPairId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrencyPair");
                });

            modelBuilder.Entity("Challenge.CacheServer.Core.Models.ExchangeRate", b =>
                {
                    b.HasOne("Challenge.CacheServer.Core.Models.CurrencyPair", "CurrencyPair")
                        .WithMany("ExchangeRates")
                        .HasForeignKey("CurrencyPairId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrencyPair");
                });

            modelBuilder.Entity("Challenge.CacheServer.Core.Models.CurrencyPair", b =>
                {
                    b.Navigation("CacheRecords");

                    b.Navigation("ExchangeRates");
                });
#pragma warning restore 612, 618
        }
    }
}
